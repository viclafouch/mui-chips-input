"use strict";(self.webpackChunkmui_chips_input=self.webpackChunkmui_chips_input||[]).push([[986],{9290:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"react-hook-form","title":"React Hook Form","description":"Here an example if you want to plug MuiChipsInput to your form using React Hook Form.","source":"@site/docs/react-hook-form.md","sourceDirName":".","slug":"/react-hook-form","permalink":"/mui-chips-input/docs/react-hook-form","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Playground","permalink":"/mui-chips-input/docs/playground"}}');var r=e(4848),i=e(8453);const s={},a="React Hook Form",c={},u=[];function m(n){const t={a:"a",code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"react-hook-form",children:"React Hook Form"})}),"\n",(0,r.jsxs)(t.p,{children:["Here an example if you want to plug ",(0,r.jsx)(t.code,{children:"MuiChipsInput"})," to your form using ",(0,r.jsx)(t.a,{href:"https://react-hook-form.com/",children:"React Hook Form"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import React from "react";\nimport ReactDOM from "react-dom";\nimport Button from "@mui/material/Button";\nimport { MuiChipsInput } from "mui-chips-input";\nimport { Controller, useForm } from "react-hook-form";\n\nconst schema = z.object({\n  chips: z.array(z.string()).min(1),\n});\n\nconst App = () => {\n  const { control, handleSubmit } = useForm({\n    defaultValues: {\n      chips: []\n    },\n    resolver: zodResolver(schema),\n  });\n\n  const onSubmit = (data) => {\n    alert(JSON.stringify(data));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name="chips"\n        control={control}\n        render={({ field, fieldState }) => (\n          <MuiChipsInput\n            {...field}\n            hideClearAll\n            helperText={fieldState.error?.message}\n            error={fieldState.invalid}\n          />\n        )}\n      />\n     <div>\n        <Button type="submit" variant="contained" sx={{ mt: 2 }}>\n          Submit\n        </Button>\n      </div>\n    </form>\n  )\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://codesandbox.io/p/sandbox/stoic-christian-nzxtg5",children:(0,r.jsx)(t.img,{src:"https://codesandbox.io/static/img/play-codesandbox.svg",alt:"Edit on CodeSandbox"})})})]})}function d(n={}){const{wrapper:t}={...(0,i.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>s,x:()=>a});var o=e(6540);const r={},i=o.createContext(r);function s(n){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function a(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(i.Provider,{value:t},n.children)}}}]);